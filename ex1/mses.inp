
!PRNLEV  7

! import force fields and coordinates
! ------------------------------------------------------------------
 read rtf  card name go_gb1p.top
 read rtf  card append name top_all22_prot.inp
 read para card name go_gb1p.param
 read para card append name par_all22_prot.inp
 read psf  card name gb1p_hybrid.psf
 read coor card name gb1p_hybrid.crd

! NONBOND setup
! ------------------------------------------------------------------
 NBOND atom switch cdie vdw vswitch -
       ctonnb 16.0 ctofnb 18.0 cutnb 20.0

! GBMV implicit solvent model 
! ------------------------------------------------------------------
! GBMV only works for CUDA platform
!scalar wmain = radii
!set GBRAdiiname  = /home/ping/pbs/radii_c36gbmvop.str
!stream @GBRAdiiname
!scalar wmain set 0 sele segid CG end
!GBMV BETA -12  P3 0.65 WATR 1.4  SHIFT -0.102 SLOPE 0.9085  P6 8 SA 0.005 -
!     WTYP 2 nphi 26 weight

! MSES setup
! -------------------------------------------------------------------
 open read card unit 10 name contact.list
 MSES DIST FORC 1 IUNLIST 10 RSWI 2.0 FMAX 0.5 SEXP 1.0
 close unit 10

! ENERGY TEST (CPU vs. CUDA)
! ---------------------------------------------------------------------
 omm platform cpu 
 energy omm 
 set eomm_cpu = ?ener
 coor force comp
 set return fromCPUENER
 goto ommcpu
 label fromCPUENER

 omm platform cuda
 energy omm
 set eomm_cuda = ?ener
 coor force comp
 set return fromCUDAENER
 goto ommcuda
 label fromCUDAENER

 calc ediff = abs ( @{eomm_cpu} - @{eomm_cuda} )
 calc error = abs ( @ediff / @{eomm_cpu} )
 calc prdiff = 100 * @{ediff} / sqrt ( @{eomm_cpu} * @{eomm_cuda} )
 echo
 echo comparing default "mses" between OPENMM CPU and CUDA
 echo
 echo OMM CPU  energy with MSES: @{eomm_cpu}  kcal/mol
 echo OMM CUDA energy with MSES: @{eomm_cuda}  kcal/mol
 echo absolute unsigned difference: @ediff  kcal/mol  kcal/mol
 echo
 echo Force dot product: @fsum
 echo Percent energy error: @prdiff
 echo
 set return fromTestENER
 set test = energytest
 goto prresults
 label fromTestENER

 !stop

! NVE DYNAMIC TEST (CPU vs. CUDA)
! ---------------------------------------------------------------------
 set temp  = 300.0
 set nsteps = 50
 set fbeta = 0.1
 scalar fbeta set @fbeta
 scalar fbeta set 0.0 select type H* end
 shake  tolerance 1.0e-06 bonh param

 omm platform cpu 
 read coor card name gb1p_hybrid.crd
 dynamics leap start -
 timestep 0.002 -      !!timestep interval
 nstep @nsteps -       !!no. of steps
 iseed 234234399 -     !!random seed for integrator
 nprint 10 -           !!freq of printout
 inbfrq -1 -
 ilbfrq 0 -
 tstruct @temp -
 firstt @temp -
 echeck -1 omm             !!energy tolerance check before crashing
 energy omm 
 set eomm_cpu = ?ener
 coor force comp
 set return fromCPUDYNA
 goto ommcpu
 label fromCPUDYNA

 omm platform cuda
 read coor card name gb1p_hybrid.crd
 dynamics leap start -
 timestep 0.002 -      !!timestep interval
 nstep @nsteps -       !!no. of steps
 iseed 234234399 -     !!random seed for integrator
 nprint 10 -           !!freq of printout
 inbfrq -1 -
 ilbfrq 0 -
 tstruct @temp -
 firstt @temp -
 echeck -1 omm             !!energy tolerance check before crashing
 energy omm 
 set eomm_cuda = ?ener
 coor force comp
 set return fromCUDADYNA
 goto ommcuda
 label fromCUDADYNA

 calc ediff = abs ( @{eomm_cpu} - @{eomm_cuda} )
 calc error = abs ( @ediff / @{eomm_cpu} )
 calc prdiff = 100 * @{ediff} / sqrt ( @{eomm_cpu} * @{eomm_cuda} )
 echo
 echo comparing default "mses" between OPENMM CPU and CUDA
 echo
 echo OMM CPU  energy with MSES: @{eomm_cpu}  kcal/mol
 echo OMM CUDA energy with MSES: @{eomm_cuda}  kcal/mol
 echo absolute unsigned difference: @ediff  kcal/mol  kcal/mol
 echo
 echo Force dot product: @fsum
 echo Percent energy error: @prdiff
 echo
 set return fromTestDYNA
 set test = dynamictest
 goto prresults
 label fromTestDYNA

stop



!-------------------------------------------------------------------------------
! AUX ROUTINES FOR NORMALIZATION AND DOT PRODUCTS
!-------------------------------------------------------------------------------

label prresults
  set estat = fail
  if @prdiff le 5e-1 then
    set estat = pass
  endif
    
  calc diff = abs ( 1 - @fsum )
  set fstat = fail
  if @diff le 1e-2 then
    set fstat = pass  
  endif

  echo testcase result: @estat @test - energy 
  echo testcase result: @fstat @test - forces 
goto @return


!-------------------------------------------------------------------------------

label ommcpu  ! Normalize CHARMM forces in 4, 5, 6
   scalar xcomp store 4
   scalar ycomp store 5
   scalar zcomp store 6
   
   scalar xcomp *store 4
   scalar ycomp *store 5
   scalar zcomp *store 6
   
   scalar wcomp recall 4
   scalar wcomp stat
   set fsum = ?stot
   
   scalar wcomp recall 5
   scalar wcomp stat
   Calc fsum = @fsum + ?stot
   
   scalar wcomp recall 6
   scalar wcomp stat
   Calc fsum = @fsum + ?stot
   Calc fsum =  sqrt ( @fsum )
   
   scalar xcomp divi @fsum
   scalar ycomp divi @fsum
   scalar zcomp divi @fsum
   
   scalar xcomp store 4
   scalar xcomp *store 4
   scalar ycomp store 5
   scalar ycomp *store 5
   scalar zcomp store 6
   scalar zcomp *store 6
   
   scalar wcomp recall 4
   scalar wcomp stat
   set fsum = ?stot
   
   scalar wcomp recall 5
   scalar wcomp stat
   Calc fsum = @fsum + ?stot
   
   scalar wcomp recall 6
   scalar wcomp stat
   Calc fsum = @fsum + ?stot
   
   echo @fsum
   
   scalar xcomp store 4
   scalar ycomp store 5
   scalar zcomp store 6

goto @return

!-------------------------------------------------------------------------------

label ommcuda   ! Normalize openmm forces stored in 7, 8, 9
                ! Compute dot product of forces in 4-6 vs 7-9
   scalar xcomp store 7
   scalar ycomp store 8
   scalar zcomp store 9
   
   scalar 4 store 1
   scalar 5 store 2
   scalar 6 store 3
   
   scalar xcomp *store 7
   scalar ycomp *store 8
   scalar zcomp *store 9
   
   scalar wcomp recall 7
   scalar wcomp stat
   set fsum = ?stot
   
   scalar wcomp recall 8
   scalar wcomp stat
   Calc fsum = @fsum + ?stot
   
   scalar wcomp recall 9
   scalar wcomp stat
   Calc fsum = @fsum + ?stot
   Calc fsum =  sqrt ( @fsum )
   
   scalar xcomp divi @fsum
   scalar ycomp divi @fsum
   scalar zcomp divi @fsum
   
   scalar xcomp *store 4
   scalar ycomp *store 5
   scalar zcomp *store 6
   
   scalar wcomp recall 4
   scalar wcomp stat
   set fsum = ?stot
   
   scalar wcomp recall 5
   scalar wcomp stat
   Calc fsum = @fsum + ?stot
   
   scalar wcomp recall 6
   scalar wcomp stat
   Calc fsum = @fsum + ?stot
   
   scalar 1 store 4
   scalar 2 store 5
   scalar 3 store 6
   
goto @return




